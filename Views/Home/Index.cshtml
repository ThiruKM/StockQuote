@{
    ViewBag.Title = "Index";
}

<div>
    <label>Enter Stock Symbol</label>
    <input id="stockSymbol" />
    <input type="button" id="addStockQuote" value="Add"/>
</div>
<div id='stockList'>
    <table width="500">
        <tr>
            <th style="text-align: left">
                StockSymbol
            </th>
            <th style="text-align: left">
                Price
            </th>
        </tr>
        <tbody data-bind="foreach: stocks">
            <tr>
                <td>
                    <div data-bind="text: stockSymbol"></div>
                </td>
                <td>
                    <div data-bind="text: stockPrice"></div>
                </td>
            </tr>
        </tbody>
</table>
</div>

@section scripts
{
    <script type="text/javascript">
        
        var mavis = mavis || {};
        mavis.trading = mavis.trading || {};

        function StockQuote() {

        };

        StockQuote.prototype = {

            init : function() {
                ko.applyBindings(this.stocksViewModel);
            },

            //Empty model
            stocksViewModel: {
                stocks: ko.observableArray([])
            },

            addStock: function(stockSymbol) {
                $.ajax({
                    url: '/Home/AddStock',
                    data: { stockSymbol: stockSymbol},
                    success: function (data) {
                    },
                    error: function (e, d) {
                    }
                });
            },

            refreshStockList: function() {
                $.ajax({
                    url: '/Home/GetStockList',
                    data: {},
                    success: function (data) {
                        mavis.trading.StockQuote.stocksViewModel.stocks.removeAll();
                        $.each(data, function (index, item) {
                            mavis.trading.StockQuote.stocksViewModel.stocks.push(item);
                        });
                    }
                });
            }
        }
        
        mavis.trading.StockQuote = new StockQuote();
        mavis.trading.StockQuote.init();

        var firstTimeStockAdded = true;
        $('#addStockQuote').off('click').on('click', function (e) {

            mavis.trading.StockQuote.addStock($('#stockSymbol').val());

            if (firstTimeStockAdded) {
                refreshStockList();
            }
            firstTimeStockAdded = false;
        });

        function refreshStockList() {
            //I would implement this as Signalr update so that it will push instead of pull.. due to lag of time I opted for each approach
            var seconds = 5;
            setInterval(function () {
                mavis.trading.StockQuote.refreshStockList();
            }, seconds * 1000);
        }

        function Stock(stockSymbol, stockPrice) {
            var self = this;
            self.stockSymbol = stockSymbol;
            self.stockPrice = stockPrice;
        }
    </script>
}